/*
** НОК натуральных чисел
** Зависимости:
** GCF_NN_N
** MUL_NN_N
** (то есть при создании данного модуля должны использоваться функции этих модулей).
**
** В случае неимения решения модуля (в соответствующем проекте) на данный момент, прошу
** использовать в коде прототипы функций, что описал в header файле (все функции называются
** примерно также, как и модули).
**
** А как появится решение, можете скопировать код функции соответствующего проекта для
** своей  программы и протестировать ее на различные входные данные. С технологией
** тестирования определюсь позднее.
**
** Требование: оформлять функции (порядок аргументов и выходные данные) и использовать
** зависимые модули(если таковые есть) в точности с прототипом header файла
** (это сделано для стандартизации работы проекта).
**
** !!! В случае отсутствия у модуля каких-либо зависимостей необходимо сделать его
** как можно скорее и отправить на проверку !!!
**
** Желаю успехов, боец
** (-_-)
*/
#include <cassert>
#include "head.h"


LongN LCMofNNtoN(const LongN& Num1 , const LongN& Num2)
{
    // НОК - частное от деления произведения чисел на их НОД.
    LongN result = divNNtoN(mulNNtoN(Num1 , Num2) , GCFofNNtoN(Num1 , Num2));

    return result;
}

void LCMofNNtoNtest()
{
    assert(comNNtoD(LCMofNNtoN({ 3, {2, 2, 3, 4} } , { 1,{2, 2} }) , { 4, { 2, 4, 5, 7, 4 } }) == 0);
    assert(comNNtoD(LCMofNNtoN({ 2, {0, 0, 1} } , { 0,{2} }) , { 2, { 0, 0, 1} }) == 0);
    assert(comNNtoD(LCMofNNtoN({ 3, {4, 2, 0, 1} } , { 2,{6, 5, 2} }) , { 3, {4, 2, 0, 1} }) == 0);
}

int main()
{
    LCMofNNtoNtest();
    return 0;
}
