/*
**Преобразование натурального в целое
**Зависимостей с другими модулями нет, функционал реализуется сразу.
**
** Требование: оформлять функции (порядок аргументов и выходные данные) и использовать
** зависимые модули(если таковые есть) в точности с прототипом header файла
** (это сделано для стандартизации работы проекта).
**
** !!! В случае отсутствия у модуля каких-либо зависимостей необходимо сделать его
** как можно скорее и отправить на проверку !!!
**
** Желаю успехов, боец
** (-_-)
*/
#include <cassert>
#include "head.h"

LongZ transNtoZ(const LongN& number)
{
    LongZ result = { 0, {0} };
    result.sign = 0; // натуральные числа всегда положительны => знак '+'

    // само число не изменятеся => номер старшей позиции и сами цифры числа не меняются
    result.deg = number.deg;
    for (int i = 0; i <= result.deg; i++)
        result.arrOfNums[i] = number.arrOfNums[i];

    return result;
}


int main()
{
    LongZ numZ = { 0, 3,{ 6, 2, 8, 4 } };
    LongN numN = { 3,{ 6, 2, 8, 4 } };
    assert(comZZtoB(numZ , transNtoZ(numN)));
    numZ = { 0, 4,{ 6, 5, 2, 8, 4 } };
    numN = { 4,{ 6, 5, 2, 8, 4 } };
    assert(comZZtoB(numZ , transNtoZ(numN)));
    numZ = { 0, 2,{ 2, 8, 4 } };
    numN = { 2,{ 2, 8, 4 } };
    assert(comZZtoB(numZ , transNtoZ(numN)));

    return 0;
}
