/*
** Производная многочлена
** Зависимостей с другими модулями нет, функционал реализуется сразу.
**
** Требование: оформлять функции (порядок аргументов и выходные данные) и использовать
** зависимые модули(если таковые есть) в точности с прототипом header файла
** (это сделано для стандартизации работы проекта).
**
** !!! В случае отсутствия у модуля каких-либо зависимостей необходимо сделать его
** как можно скорее и отправить на проверку !!!
**
** Желаю успехов, боец
** (-_-)
*/
#include <cassert>
#include "head.h"

LongP derPtoP(const LongP& polynomial)
{
    LongP result = polynomial;

    if (degPtoN(result) > 0)
    {
        for (signed short int i = 1; i <= degPtoN(result); ++i)
        {
            result.odds[i - 1] = mulQQtoQ(result.odds[i] , { {0, 0, {i}}, {0, {1}} });
        }

        result.odds[degPtoN(result)] = { 0 };
        result.deg--;

        return result;
    }
    else
        return { 0 };
}

void derPtoPtests()
{
    //137x^11 - 895x^10 +  7x^9 + 0x^8 + 338x^7 + 0x^6 + 13x^5 + 167x^4 + 56x^3 - 2348x^2 + 338x + 96
    LongP test =
    {
        11,
        {
            {
                {0, 1, {6, 9}},
                {0, {1}}
            },
            {
                {0, 2, {8, 3, 3}},
                {0, {1}}
            },
            {
                {1, 3, {8, 4, 3, 2}},
                {0, {1}}
            },
            {
                {0, 1, {6, 5}},
                {0, {1}}
            },
            {
                {0, 2, {7,6,1}},
                {0, {1}}
            },
            {
                {0, 1, {3, 1}},
                {0, {1}}
            },
            {
                {0, 0, {0}},
                {0, {1}}
            },
            {
                {0, 2, {8, 3, 3}},
                {0, {1}}
            },
            {
                {0, 0, {0}},
                {0, {1}}
            },
            {
                {0, 0, {7}},
                {0, {1}}
            },
            {
                {1, 2, {5, 9, 8}},
                {0, {1}}
            },
            {
                {0, 2, {7, 3, 1}},
                {0, {1}}
            }
        }
    };
    //  1507x^10 - 8950x^9 + 63x^8 + 0x^7 + 2366x^6 + 0x^5 + 65x^4 + 668x^3 + 168x^2 - 4696x + 338
    LongP result =
    {
    10,
    {
        {
            {0, 2, {8, 3, 3}},
            {0, {1}}
        },
        {
            {1, 3, {6, 9, 6, 4}},
            {0, {1}}
        },
        {
            {0, 2, {8, 6, 1}},
            {0, {1}}
        },
        {
            {0, 2, {8, 6, 6}},
            {0, {1}}
        },
        {
            {0, 1, {5, 6}},
            {0, {1}}
        },
        {
            {0, 0, {0}},
            {0, {1}}
        },
        {
            {0, 3, {6, 6, 3, 2}},
            {0, {1}}
        },
        {
            {0, 0, {0}},
            {0, {1}}
        },
        {
            {0, 1, {3, 6}},
            {0, {1}}
        },
        {
            {1, 3, {0, 5, 9, 8}},
            {0, {1}}
        },
        {
            {0, 3, {7, 0, 5, 1}},
            {0, {1}}
        }
    }
    };

    LongP resTest = derPtoP(test);
    assert(comPPtoB(result , resTest));
}

int main()
{
    derPtoPtests();
    return 0;
}
